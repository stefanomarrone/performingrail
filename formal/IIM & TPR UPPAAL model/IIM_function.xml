<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>//Assumption : train length never changes in train data
//Assumption : desynch timer &lt;= synch timer
//Assumption : TPR_Reporting_TIMEOUT &lt; SynchronizationTIMEOUT
//int [0,nTrain] n
// train mode
const int NB_MODE = 16;
typedef int [0, 15] M_Mode_Type ; 
const M_Mode_Type FullSupervision = 0;
const M_Mode_Type OnSight = 1;
const M_Mode_Type StaffResponsible = 2;
const M_Mode_Type Shunting = 3; 
const M_Mode_Type Unfitted = 4; 
const M_Mode_Type Sleeping = 5; 
const M_Mode_Type StandBy = 6; 
const M_Mode_Type Trip = 7; 
const M_Mode_Type PostTrip = 8; 
const M_Mode_Type SystemFailure =  9;
const M_Mode_Type Isolation = 10; 
const M_Mode_Type NonLeading = 11; 
const M_Mode_Type LimitedSupervision = 12; 
const M_Mode_Type STMNational = 13; 
const M_Mode_Type Reversing = 14; 
const M_Mode_Type spare = 15 ;

// status TTD/TSA
const int NB_STATUS = 3;
typedef int [0, 2] STATUS_Type ; 
const STATUS_Type CLEAR = 0;
const STATUS_Type OCCUPIED = 1;
const STATUS_Type UNKNOWN = 2;

// integrity Information

const int NB_IntegrityStatus = 4;
typedef int [0, 4] Integrity_Information ;
const Integrity_Information NoInformation = 0 ; 
const Integrity_Information MonitoringDevice = 1;
const Integrity_Information IntegrityDriver = 2 ;
const Integrity_Information Lost = 3 ;

const int nLRBG=10; //number of LRBG
const int nTrain=3 ; //number of trains
const int L_TRAIN = 900 ; //m

//train speed max 110 m/s 400 km/h = 

int SpeedTrain [nTrain]  ;

M_Mode_Type mode [nTrain]; // FullSupervision
Integrity_Information CurrentIntegrityStatus [nTrain] ;// = MonitoringDevice ; //integrity computed with IIM
Integrity_Information sentII [nTrain] ;//= NoInformation ; //integrity sent from IIM updating to TM

//Train Move variable 


int TrainLRBG [nTrain] ;
double TrainLocation [nTrain] ;
double destination [nTrain] ;
double MA [nTrain] ;
//Train data variable 


bool Available_Train_Data [nTrain] ;//= true ;
bool Ack_Train_Data_RBC [nTrain] ;
bool Train_Length_change [nTrain] ;
bool standstill [nTrain] ;
bool Available_Train_Data_Last_Confirmed [nTrain] ;
bool Available_Train_Data_Last_Lost [nTrain] ;

//Integrity_Information  M_TRAIN_INTEGRITY_INFO = NoInformation; //variable received from TIMS 

clock integrityCheckTimer ;
clock test ;
//Channel definition
//Train DATA
chan ACK_TRAIN_DATA [nTrain] ; //SDS - TM //
chan Send_TRAIN_DATA [nTrain] ; //SDS - TM
chan VALID_TRAIN_DATA_SDS [nTrain] ; //train - SDS
chan INVALID_TRAIN_DATA_SDS  [nTrain]; //train - SDS
chan Train_Speed [nTrain];

//Train Position Reporting

chan LocationRequest [nTrain]; //LU-TPR
chan LocationReply  [nTrain]; //LU-TPR
broadcast chan TrainPositionReport [nTrain]; // TPR-TM

chan ReceivePositionReport [nTrain] ;
chan Train_Integrity_Confirmed [nTrain]; //IIM - TIMS
chan Train_Integrity_Unknown [nTrain]; //IIM - TIMS
chan Train_Integrity_Lost [nTrain]; //IIM - TIMS
broadcast chan Integrity_Confirmed_By_Driver [nTrain]; //IIM - DRIVER
chan IntegrityInfo [nTrain]; //IIM - TPR

chan RequestPositionReport [nTrain];

broadcast chan ReverseMode [nTrain];
/* For the verification we can consider the following scenario : initially : available train data = true, ack = true, integrity status = confirmed, last lost = true, last confirmed = true ,
Train Data : invalid  -&gt; available train data = false, ack = false, integrity status = confirmed, last lost = false, last confirmed = false ,
Train Data + ACK : valid  -&gt; available train data = true, ack = true, integrity status = confirmed, last lost = false, last confirmed = false ,
TIMS LOST : no transition possible
*/</declaration>
	<template>
		<name>TrainMode</name>
		<parameter>int ID_Train</parameter>
		<location id="id0" x="357" y="-136">
			<name x="347" y="-166">ModeRV</name>
		</location>
		<location id="id1" x="88" y="-136">
			<name x="78" y="-170">ModeSR</name>
		</location>
		<location id="id2" x="238" y="-136">
			<name x="229" y="-170">ModeOS</name>
		</location>
		<location id="id3" x="-51" y="-136">
			<name x="-61" y="-170">ModeFS</name>
		</location>
		<location id="id4" x="-204" y="-136">
			<name x="-229" y="-170">ModeStandBy</name>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="assignment" x="59" y="-127">mode [ID_Train] = OnSight</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="assignment" x="0" y="-272">mode [ID_Train] = StandBy</label>
			<nail x="352" y="-248"/>
			<nail x="-208" y="-248"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="248" y="-128">ReverseMode[ID_Train] !</label>
			<label kind="assignment" x="238" y="-102">mode [ID_Train] = Reversing</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="assignment" x="-59" y="-110">mode [ID_Train] = StaffResponsible</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="assignment" x="-272" y="-127">mode [ID_Train] = FullSupervision</label>
		</transition>
	</template>
	<template>
		<name>Driver</name>
		<parameter>int ID_Train</parameter>
		<location id="id5" x="-501" y="-484">
			<name x="-527" y="-518">initDriver</name>
		</location>
		<location id="id6" x="-144" y="-484">
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-450" y="-527">SpeedTrain[ ID_Train] == 0</label>
			<label kind="synchronisation" x="-459" y="-510">Integrity_Confirmed_By_Driver[ID_Train] !</label>
			<nail x="-399" y="-484"/>
		</transition>
	</template>
	<template>
		<name>TIMS</name>
		<parameter>int ID_Train</parameter>
		<declaration>// frenquency of sending information
const int TIMS_sending_II_TIMEOUT = 2;
clock t_tims ;</declaration>
		<location id="id7" x="-399" y="-493">
			<name x="-416" y="-484">initTIMS</name>
			<label kind="invariant" x="-459" y="-442">t_tims &lt;= TIMS_sending_II_TIMEOUT</label>
		</location>
		<location id="id8" x="-399" y="-646">
			<name x="-409" y="-680">lost</name>
			<committed/>
		</location>
		<location id="id9" x="-595" y="-493">
			<name x="-671" y="-501">confirmed</name>
			<committed/>
		</location>
		<location id="id10" x="-212" y="-493">
			<name x="-195" y="-501">unknown</name>
			<committed/>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="assignment" x="-373" y="-556">t_tims = 0</label>
			<nail x="-348" y="-620"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id7"/>
			<label kind="assignment" x="-314" y="-544">t_tims = 0</label>
			<nail x="-205" y="-539"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="assignment" x="-561" y="-544">t_tims = 0</label>
			<nail x="-595" y="-535"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id10"/>
			<label kind="guard" x="-357" y="-467">t_tims == TIMS_sending_II_TIMEOUT</label>
			<label kind="synchronisation" x="-348" y="-484">Train_Integrity_Unknown[ID_Train] !</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
			<label kind="guard" x="-663" y="-459">t_tims == TIMS_sending_II_TIMEOUT</label>
			<label kind="synchronisation" x="-654" y="-476">Train_Integrity_Confirmed [ID_Train] !</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-637" y="-603">t_tims == TIMS_sending_II_TIMEOUT</label>
			<label kind="synchronisation" x="-595" y="-620">Train_Integrity_Lost [ID_Train] !</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">IIM_StatusManagement</name>
		<parameter>int ID_Train</parameter>
		<declaration>// Place local declarations here.</declaration>
		<location id="id11" x="-34" y="323">
			<name x="-76" y="340">Integrity_Lost</name>
		</location>
		<location id="id12" x="-25" y="85">
			<name x="-68" y="8">No_Train_Integrity</name>
		</location>
		<location id="id13" x="204" y="85">
			<name x="229" y="76">Integrity_Confirmed_Driver</name>
		</location>
		<location id="id14" x="-297" y="85">
			<name x="-467" y="51">Integrity_Confirmed_TIMS</name>
		</location>
		<location id="id15" x="-442" y="-51">
			<urgent/>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="assignment" x="-697" y="-17">CurrentIntegrityStatus [ID_Train]= MonitoringDevice,
Available_Train_Data_Last_Lost [ID_Train] = true</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id12"/>
			<label kind="guard" x="-569" y="238">Available_Train_Data_Last_Lost [ID_Train] == false</label>
			<label kind="synchronisation" x="-578" y="255">Train_Integrity_Lost[ID_Train] ?</label>
			<label kind="assignment" x="-731" y="272">Available_Train_Data_Last_Lost [ID_Train] = Available_Train_Data [ID_Train]</label>
			<nail x="-68" y="93"/>
			<nail x="-51" y="119"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="guard" x="-612" y="68">Available_Train_Data_Last_Lost [ID_Train] == false</label>
			<label kind="synchronisation" x="-612" y="85">Train_Integrity_Lost[ID_Train] ?</label>
			<label kind="assignment" x="-756" y="102">Available_Train_Data_Last_Lost [ID_Train] = Available_Train_Data [ID_Train]</label>
			<label kind="testcode">init : integrity lost, avai train data true, last lost true,

invalid train data received -&gt;  avai train data false, last lost false, last confirmed false

valid train data received -&gt;  avai train data true</label>
			<nail x="-348" y="68"/>
			<nail x="-348" y="119"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="-238" y="34">mode[ID_Train] == Reversing</label>
			<label kind="synchronisation" x="-272" y="51">ReverseMode[ID_Train] ?</label>
			<label kind="comments" x="-119" y="59">condition 8</label>
			<nail x="-255" y="51"/>
			<nail x="-127" y="51"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="-323" y="-8">Train_Length_change [ID_Train] == true</label>
			<label kind="comments" x="-195" y="8">condition 7</label>
			<nail x="-263" y="25"/>
			<nail x="-110" y="25"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="-238" y="-68">sentII [ID_Train]== MonitoringDevice</label>
			<label kind="synchronisation" x="-221" y="-51">TrainPositionReport [ID_Train]?</label>
			<label kind="assignment" x="-246" y="-34">CurrentIntegrityStatus[ID_Train] = NoInformation</label>
			<label kind="comments" x="-272" y="-85">condition 5</label>
			<nail x="-272" y="-34"/>
			<nail x="-59" y="-34"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="40" y="190">Available_Train_Data[ID_Train] == false</label>
			<label kind="assignment" x="17" y="204">CurrentIntegrityStatus [ID_Train]= NoInformation</label>
			<nail x="64" y="198"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-289" y="399">standstill[ID_Train] &amp;&amp; Available_Train_Data [ID_Train]&amp;&amp; Ack_Train_Data_RBC [ID_Train]</label>
			<label kind="synchronisation" x="-289" y="416">Integrity_Confirmed_By_Driver[ID_Train] ?</label>
			<label kind="assignment" x="-289" y="442">CurrentIntegrityStatus [ID_Train]= IntegrityDriver</label>
			<label kind="comments" x="-272" y="374">condition 2</label>
			<nail x="-306" y="399"/>
			<nail x="306" y="399"/>
			<nail x="289" y="255"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="guard" x="-297" y="263">Available_Train_Data_Last_Lost [ID_Train] == true</label>
			<label kind="synchronisation" x="-297" y="246">Train_Integrity_Lost[ID_Train] ?</label>
			<label kind="assignment" x="-297" y="280">CurrentIntegrityStatus [ID_Train] = Lost</label>
			<label kind="comments" x="-280" y="229">condition 4</label>
			<nail x="-213" y="324"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="-272" y="-128">Available_Train_Data[ID_Train] == false</label>
			<label kind="assignment" x="-271" y="-102">CurrentIntegrityStatus [ID_Train]= NoInformation</label>
			<label kind="comments" x="-221" y="-144">condition 1</label>
			<nail x="-289" y="-102"/>
			<nail x="-34" y="-102"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-629" y="323">Train_Integrity_Unknown [ID_Train] ?</label>
			<label kind="assignment" x="-629" y="340">CurrentIntegrityStatus [ID_Train] = NoInformation</label>
			<nail x="17" y="204"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-279" y="187">Train_Integrity_Confirmed [ID_Train]?</label>
			<label kind="assignment" x="-314" y="204">CurrentIntegrityStatus [ID_Train]= MonitoringDevice</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id13"/>
			<label kind="guard" x="-8" y="289">standstill[ID_Train] &amp;&amp; Available_Train_Data [ID_Train] &amp;&amp; Ack_Train_Data_RBC [ID_Train]</label>
			<label kind="synchronisation" x="8" y="306">Integrity_Confirmed_By_Driver [ID_Train]?</label>
			<label kind="assignment" x="16" y="328">CurrentIntegrityStatus [ID_Train] = IntegrityDriver</label>
			<label kind="comments" x="119" y="238">condition 2</label>
			<nail x="238" y="238"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="72" y="0">sentII [ID_Train]== MonitoringDevice</label>
			<label kind="synchronisation" x="80" y="-16">TrainPositionReport [ID_Train]?</label>
			<label kind="assignment" x="-16" y="25">CurrentIntegrityStatus[ID_Train] = NoInformation</label>
			<nail x="229" y="25"/>
			<nail x="-34" y="25"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="guard" x="-595" y="196">Available_Train_Data_Last_Lost [ID_Train] == true</label>
			<label kind="synchronisation" x="-629" y="178">Train_Integrity_Lost [ID_Train] ?</label>
			<label kind="assignment" x="-603" y="213">CurrentIntegrityStatus [ID_Train] = Lost</label>
			<label kind="comments" x="-408" y="153">condition 4</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-305" y="127">Train_Integrity_Confirmed [ID_Train]?</label>
			<label kind="assignment" x="-314" y="144">CurrentIntegrityStatus [ID_Train]= MonitoringDevice</label>
			<label kind="comments" x="-212" y="93">condition 3</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="0" y="93">standstill[ID_Train] &amp;&amp; Available_Train_Data[ID_Train] &amp;&amp; Ack_Train_Data_RBC[ID_Train]</label>
			<label kind="synchronisation" x="0" y="110">Integrity_Confirmed_By_Driver[ID_Train] ?</label>
			<label kind="assignment" x="0" y="127">CurrentIntegrityStatus [ID_Train]= IntegrityDriver</label>
			<label kind="comments" x="34" y="59">condition 2</label>
		</transition>
	</template>
	<template>
		<name>IIM_updating</name>
		<parameter>int ID_Train</parameter>
		<declaration>clock t_II ;
const int INTEGRITY_CHECK_TIMEOUT = 2 ; //Time of sending Integrity info to TPR from IIM</declaration>
		<location id="id16" x="-467" y="-340">
			<label kind="invariant" x="-527" y="-314">t_II &lt;= INTEGRITY_CHECK_TIMEOUT</label>
		</location>
		<init ref="id16"/>
		<transition>
			<source ref="id16"/>
			<target ref="id16"/>
			<label kind="guard" x="-391" y="-408">t_II == INTEGRITY_CHECK_TIMEOUT</label>
			<label kind="synchronisation" x="-391" y="-382">IntegrityInfo[ID_Train] !</label>
			<label kind="assignment" x="-391" y="-357">t_II = 0, sentII = CurrentIntegrityStatus</label>
			<nail x="-408" y="-399"/>
			<nail x="-399" y="-314"/>
		</transition>
	</template>
	<template>
		<name>TrainData</name>
		<parameter>int ID_Train, int Length , int posInit, int ID_LRBG_init,  int speed_init, int max_speed</parameter>
		<declaration>// frenquency of sending information
const int TD_sending_TIMEOUT = 30;
clock t_trainData ;</declaration>
		<location id="id17" x="-161" y="-221">
			<name x="-195" y="-161">sendTrainData</name>
			<label kind="invariant" x="-246" y="-136">t_trainData &lt;= TD_sending_TIMEOUT</label>
		</location>
		<location id="id18" x="127" y="-221">
			<name x="117" y="-255">ValidTrainData</name>
		</location>
		<location id="id19" x="-314" y="-221">
		</location>
		<location id="id20" x="-161" y="-433">
			<name x="-171" y="-467">TrainMoving</name>
			<label kind="comments" x="-136" y="-442">In our model, we did not consider the following steps
 of this abnormal behavior</label>
		</location>
		<init ref="id17"/>
		<transition>
			<source ref="id17"/>
			<target ref="id20"/>
			<label kind="guard" x="-433" y="-416">t_trainData == TD_sending_TIMEOUT &amp;&amp;
standstill[ID_Train]==false</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id17"/>
			<label kind="guard" x="-374" y="-161">standstill[ID_Train]==true</label>
			<nail x="-314" y="-161"/>
			<nail x="-187" y="-161"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id19"/>
			<label kind="guard" x="-348" y="-255">standstill[ID_Train]==true</label>
			<label kind="synchronisation" x="-408" y="-272">INVALID_TRAIN_DATA_SDS[ID_Train] !</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="guard" x="-59" y="-195">standstill[ID_Train]==true</label>
			<nail x="127" y="-170"/>
			<nail x="-153" y="-170"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="guard" x="-144" y="-340">t_trainData &lt;= TD_sending_TIMEOUT &amp;&amp;
standstill[ID_Train]==true</label>
			<label kind="synchronisation" x="-144" y="-297">VALID_TRAIN_DATA_SDS[ID_Train] !</label>
			<label kind="assignment" x="-144" y="-263">t_trainData = 0,
Train_Length_change [ID_Train] = false</label>
		</transition>
	</template>
	<template>
		<name>SpeedDistanceSupervision</name>
		<parameter>int ID_Train, bool initValueTrainData,  bool initValueACKTrainData,  bool initStandstill</parameter>
		<declaration>clock t_wait ;
const int wait_TD_ACK_TIMEOUT = 2 ; //Time configured in SDS, waiting for ACK of train data from TM
</declaration>
		<location id="id21" x="-467" y="-187">
			<name x="-476" y="-221">Init</name>
		</location>
		<location id="id22" x="-646" y="-272">
			<name x="-748" y="-297">wait_TD_ACK</name>
			<label kind="invariant" x="-875" y="-280">t_wait &lt;= wait_TD_ACK_TIMEOUT</label>
		</location>
		<location id="id23" x="-637" y="-187">
			<name x="-637" y="-221">send_TD_to_TM</name>
			<urgent/>
		</location>
		<location id="id24" x="-646" y="-365">
			<name x="-621" y="-365">Failure_ACK</name>
		</location>
		<location id="id25" x="-323" y="-187">
			<urgent/>
		</location>
		<location id="id26" x="-442" y="-51">
			<committed/>
		</location>
		<location id="id27" x="-561" y="-76">
			<urgent/>
		</location>
		<init ref="id27"/>
		<transition>
			<source ref="id27"/>
			<target ref="id21"/>
			<label kind="assignment" x="-918" y="-136">Available_Train_Data [ID_Train]= initValueTrainData,
Ack_Train_Data_RBC [ID_Train] = initValueACKTrainData,
standstill[ID_Train] = initStandstill</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id21"/>
			<label kind="guard" x="-289" y="-204">SpeedTrain[ ID_Train] != 0</label>
			<label kind="assignment" x="-297" y="-187">standstill[ID_Train] = false</label>
			<nail x="-391" y="-170"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id21"/>
			<nail x="-408" y="-85"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id26"/>
			<label kind="synchronisation" x="-399" y="-102">INVALID_TRAIN_DATA_SDS[ID_Train] ?</label>
			<label kind="assignment" x="-408" y="-85">Available_Train_Data[ID_Train] = false,
Ack_Train_Data_RBC [ID_Train] = false,
Available_Train_Data_Last_Lost [ID_Train] = false</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id21"/>
			<label kind="guard" x="-306" y="-153">SpeedTrain[ ID_Train] == 0</label>
			<label kind="assignment" x="-306" y="-136">standstill[ID_Train] = true</label>
			<nail x="-348" y="-144"/>
			<nail x="-416" y="-144"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="-450" y="-221">Train_Speed[ID_Train] ?</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id24"/>
			<label kind="guard" x="-637" y="-323">t_wait == wait_TD_ACK_TIMEOUT</label>
			<label kind="assignment" x="-637" y="-340">Ack_Train_Data_RBC [ID_Train] = false</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-731" y="-178">VALID_TRAIN_DATA_SDS [ID_Train]?</label>
			<label kind="assignment" x="-739" y="-161">Available_Train_Data [ID_Train]= true</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-799" y="-238">Send_TRAIN_DATA[ID_Train] !</label>
			<label kind="assignment" x="-731" y="-221">t_wait = 0</label>
			<nail x="-646" y="-195"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="-612" y="-280">ACK_TRAIN_DATA[ID_Train] ?</label>
			<label kind="assignment" x="-416" y="-297">Ack_Train_Data_RBC [ID_Train]= true</label>
		</transition>
	</template>
	<template>
		<name>TrainSpeed</name>
		<parameter>int ID_Train</parameter>
		<declaration>// frenquency of sending information
const int speed_sending_TIMEOUT = 2;
clock t_trainSpeed ;

void updateSpeed(int i){ 
if (i==0) SpeedTrain[ID_Train] := 0 ; 
else SpeedTrain[ID_Train] := 2 ; 

}</declaration>
		<location id="id28" x="-297" y="-127">
			<label kind="invariant" x="-306" y="-93">t_trainSpeed &lt;= speed_sending_TIMEOUT</label>
		</location>
		<init ref="id28"/>
		<transition>
			<source ref="id28"/>
			<target ref="id28"/>
			<label kind="guard" x="-229" y="-212">t_trainSpeed == speed_sending_TIMEOUT</label>
			<label kind="synchronisation" x="-229" y="-161">Train_Speed[ID_Train] !</label>
			<label kind="assignment" x="-229" y="-136">t_trainSpeed = 0,
updateSpeed(0)</label>
			<nail x="-289" y="-178"/>
			<nail x="-238" y="-170"/>
			<nail x="-255" y="-127"/>
		</transition>
	</template>
	<template>
		<name>TPR_Management</name>
		<parameter>int ID_Train</parameter>
		<declaration>const int T_CYCLOC = 5 ;
clock t_tpr ;</declaration>
		<location id="id29" x="-221" y="-212">
			<name x="-204" y="-170">TPR_init</name>
			<label kind="invariant" x="-289" y="-195">t_tpr &lt;= T_CYCLOC</label>
		</location>
		<location id="id30" x="-349" y="-348">
			<name x="-442" y="-357">waitLocation</name>
		</location>
		<location id="id31" x="-425" y="-221">
			<name x="-467" y="-195">ComputeTPR</name>
			<committed/>
		</location>
		<location id="id32" x="-127" y="-348">
			<committed/>
		</location>
		<init ref="id29"/>
		<transition>
			<source ref="id32"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="-331" y="-374">LocationRequest[ID_Train] !</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-203" y="-297">RequestPositionReport[ID_Train] ?</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="-399" y="-467">IntegrityInfo[ID_Train] ?</label>
			<nail x="-314" y="-442"/>
			<nail x="-399" y="-442"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-450" y="-212">TrainPositionReport [ID_Train] !</label>
			<label kind="assignment" x="-374" y="-195">t_tpr = 0</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="synchronisation" x="-407" y="-322">LocationReply[ID_Train] ?</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-340" y="-289">t_tpr == T_CYCLOC</label>
			<label kind="synchronisation" x="-391" y="-255">LocationRequest[ID_Train] !</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-128" y="-255">IntegrityInfo[ID_Train] ?</label>
			<nail x="-136" y="-280"/>
			<nail x="-136" y="-178"/>
		</transition>
	</template>
	<template>
		<name>Train_Management</name>
		<parameter>int ID_Train</parameter>
		<declaration>clock t_TM ;
const int ACK_TD_TIMEOUT = 1 ; //Time needed by Train Management after reception of Train Data from SDS to reply for ACK

</declaration>
		<location id="id33" x="-25" y="-68">
		</location>
		<location id="id34" x="-68" y="34">
			<label kind="invariant" x="-78" y="51">t_TM &lt;= ACK_TD_TIMEOUT</label>
		</location>
		<init ref="id33"/>
		<transition>
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="-51" y="-153">RequestPositionReport [ID_Train] !</label>
			<nail x="0" y="-102"/>
			<nail x="-85" y="-153"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="-42" y="-17">Send_TRAIN_DATA[ID_Train] ?</label>
			<label kind="assignment" x="-42" y="0">t_TM = 0</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="guard" x="-272" y="-76">t_TM == ACK_TD_TIMEOUT</label>
			<label kind="synchronisation" x="-272" y="-51">ACK_TRAIN_DATA[ID_Train] !</label>
			<nail x="-85" y="25"/>
			<nail x="-153" y="-25"/>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="42" y="-76">TrainPositionReport[ID_Train] ?</label>
			<nail x="42" y="-34"/>
			<nail x="42" y="-93"/>
		</transition>
	</template>
	<template>
		<name>LocalizationUnit</name>
		<parameter>int ID_Train</parameter>
		<location id="id35" x="-357" y="-187">
		</location>
		<location id="id36" x="-42" y="-187">
			<name x="-17" y="-195">SendLocation</name>
			<committed/>
		</location>
		<init ref="id35"/>
		<transition>
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="synchronisation" x="-255" y="-144">LocationReply[ID_Train] !</label>
			<nail x="-42" y="-119"/>
			<nail x="-357" y="-119"/>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-255" y="-212">LocationRequest[ID_Train] ?</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
TrainDataProcess = TrainData(1, 900 , 1000, 0, 0, 110);
TrainSpeedProcess = TrainSpeed(0);
TIMSProcess = TIMS(0);
DriverProcess = Driver (0);
LocationUnitProcess = LocalizationUnit(0);
SDSProcess = SpeedDistanceSupervision(0, true, true, false);
IIMProcess = IIM_StatusManagement(0);
IIMUpdateProcess = IIM_updating (0);
TrainModeProcess = TrainMode(0);
TPR_TrainModeProcess = TPR_Management (0);
Train_ManagementProcess = Train_Management(0);
//TrainMoveProcess = TrainMove(1, 900 , 1000.0, 1, 2, 5.0, 25000.0) ; //int ID_Train, int Length , int posInit, int ID_LRBG_init,  int RefreshspeedPeriod, double speed
// List one or more processes to be composed into a system.
system TIMSProcess, IIMProcess,TrainModeProcess,TrainSpeedProcess, TPR_TrainModeProcess , LocationUnitProcess, DriverProcess,Train_ManagementProcess, IIMUpdateProcess, TrainDataProcess &lt; SDSProcess; 
//  ;
 </system>
	<queries>
		<query>
			<formula>E&lt;&gt; Available_Train_Data[0] == true </formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Available_Train_Data[0] == false </formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; standstill[0] == false</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; test &gt;= 1</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; test &gt;= 10</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; standstill[0] == true</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; IIMProcess.No_Train_Integrity</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; IIMProcess.Integrity_Lost</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; IIMProcess.Integrity_Confirmed_TIMS</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; IIMProcess.Integrity_Confirmed_Driver</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
