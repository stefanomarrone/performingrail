<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Global declarations
const int N_TRAINS = 2;

const bool muteTimerConfigured = true;

const int MUTE_EXPIRED_TIMEOUT = 10;
const int SESSION_EXPIRED_TIMEOUT = 17;
const int INTEGRITY_WAIT_TIMEOUT = 40;

const int TSA_LENGTH_TOLERANCE = 0;

clock mute_timer[N_TRAINS], session_timer[N_TRAINS];
clock integrityTimer;

typedef struct {
    int id;
    int length;
    // 0 = FullSupervision, 1 = OnSight
    int M_MODE;
    // 0 = NoInformation, 1 = Driver, 2 = MonitoringDevice, 3 = ExternalDevice
    int integrityConfSource;
} TPR; 

// Stores the most recent TPR sent by each train
TPR tpr[N_TRAINS];

// Train uses this to send TPRs to CM and TM
broadcast chan tpr_ch[N_TRAINS];

// CM uses this to tell TM that a timer has expired
chan timeout_ch[N_TRAINS];
// CM uses this to tell TM that a train has reconnected 
chan reconnect_ch[N_TRAINS];
// TI uses this to tell TM that the integrity timer has expired
chan integrity_timeout_ch[N_TRAINS];

// TM uses this to tell CM if the Train Data is valid or not
chan TPR_OK, TPR_NotOK;
// TM uses this to tell TSM to set the TSA to Unknown
chan tsaunknown_ch[N_TRAINS];
// TM uses this to tell TSM to set the TSA to Occupied
chan tsaoccupy_ch[N_TRAINS];
// TM uses this to tell TSM to release the TSA
chan tsarelease_ch[N_TRAINS];
// TSM uses this to tell RM to release the TSA
chan tsarelease_RM_ch[N_TRAINS];

// Integrity Conditions
bool integrityAcceptedByDriver(){
    return true;
}



</declaration>
	<template>
		<name x="9" y="9">CommunicationManager</name>
		<parameter>const int i</parameter>
		<declaration>// Local declarations for CommunicationManager
void resetTimers(){
    mute_timer[i] = 0;
    session_timer[i] = 0;
}





</declaration>
		<location id="id0" x="672" y="9">
			<name x="629" y="17">WaitForTPR</name>
			<label kind="invariant" x="527" y="-51">mute_timer[i] &lt;= MUTE_EXPIRED_TIMEOUT &amp;&amp; 
session_timer[i] &lt;= SESSION_EXPIRED_TIMEOUT</label>
		</location>
		<location id="id1" x="672" y="264">
			<name x="604" y="230">WaitForReconnection</name>
			<label kind="invariant" x="340" y="255">session_timer[i] &lt;= SESSION_EXPIRED_TIMEOUT</label>
		</location>
		<location id="id2" x="672" y="519">
			<name x="689" y="527">EXIT</name>
		</location>
		<location id="id3" x="1148" y="264">
			<name x="1165" y="255">ReceivingReconnectionTPR</name>
			<urgent/>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="527" y="-178">mute_timer[i] &lt;= MUTE_EXPIRED_TIMEOUT &amp;&amp;
session_timer[i] &lt;= SESSION_EXPIRED_TIMEOUT</label>
			<label kind="synchronisation" x="637" y="-195">tpr_ch[i]?</label>
			<label kind="assignment" x="629" y="-136">resetTimers()</label>
			<nail x="791" y="-136"/>
			<nail x="553" y="-136"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="1156" y="374">TPR_NotOK?</label>
			<nail x="1148" y="519"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="340" y="366">session_timer[i] == SESSION_EXPIRED_TIMEOUT</label>
			<label kind="synchronisation" x="680" y="366">timeout_ch[i]!</label>
			<nail x="672" y="408"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="349" y="102">mute_timer[i] == MUTE_EXPIRED_TIMEOUT &amp;&amp; 
session_timer[i] &lt;= SESSION_EXPIRED_TIMEOUT</label>
			<label kind="synchronisation" x="680" y="119">timeout_ch[i]!</label>
			<nail x="672" y="128"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="1156" y="136">TPR_OK?</label>
			<label kind="assignment" x="1156" y="102">resetTimers()</label>
			<nail x="1148" y="9"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="774" y="264">session_timer[i] &lt;= SESSION_EXPIRED_TIMEOUT</label>
			<label kind="synchronisation" x="867" y="238">tpr_ch[i]?</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-76" y="187">session_timer[i] == SESSION_EXPIRED_TIMEOUT</label>
			<label kind="synchronisation" x="153" y="221">timeout_ch[i]!</label>
			<nail x="247" y="9"/>
			<nail x="247" y="519"/>
		</transition>
	</template>
	<template>
		<name>Train</name>
		<parameter>const int i, int length</parameter>
		<declaration>// Local declarations for Train
const int TRAIN_MSG_PERIOD = 2;
const int IDLE_TIME = 5;

clock tpr_wait;

void setTPR_resetTPRwait(){
    tpr[i].id = i;
    tpr[i].length = length;
    tpr_wait = 0;
}

void setWrongTPR_resetTPRwait(){
    tpr[i].id = i;
    tpr[i].length = length - 1;
    tpr_wait = 0;
}</declaration>
		<location id="id4" x="-1572" y="43">
			<name x="-1564" y="17">WaitingPeriod</name>
			<label kind="invariant" x="-1555" y="51">tpr_wait &lt;= TRAIN_MSG_PERIOD</label>
		</location>
		<location id="id5" x="-1785" y="-246">
			<name x="-1827" y="-280">SendingTPR</name>
			<committed/>
		</location>
		<location id="id6" x="-1572" y="-246">
			<name x="-1632" y="-280">SendingWrongTPR</name>
			<committed/>
		</location>
		<location id="id7" x="-1368" y="-246">
			<name x="-1385" y="-280">Idling</name>
			<label kind="invariant" x="-1445" y="-255">tpr_wait &lt;= IDLE_TIME</label>
		</location>
		<branchpoint id="id8" x="-1572" y="-102">
		</branchpoint>
		<init ref="id4"/>
		<transition>
			<source ref="id4"/>
			<target ref="id8"/>
			<label kind="guard" x="-1657" y="-59">tpr_wait == TRAIN_MSG_PERIOD</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="guard" x="-1360" y="-110">tpr_wait == IDLE_TIME</label>
			<label kind="assignment" x="-1360" y="-68">tpr_wait = 0</label>
			<nail x="-1368" y="43"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="assignment" x="-1819" y="77">setWrongTPR_resetTPRwait()</label>
			<nail x="-1572" y="-306"/>
			<nail x="-1870" y="-306"/>
			<nail x="-1870" y="102"/>
			<nail x="-1572" y="102"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="assignment" x="-1768" y="17">setTPR_resetTPRwait()</label>
			<nail x="-1785" y="43"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="assignment" x="-1487" y="-195">tpr_wait = 0</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-1606" y="-195">tpr_ch[i]!</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-1734" y="-195">tpr_ch[i]!</label>
		</transition>
	</template>
	<template>
		<name>TrainsManagement</name>
		<parameter>const int i, int length</parameter>
		<declaration>bool extendsIntoPreviouslyClearArea(){
    return true;
}

bool extensionOK(){
    return true;
}

bool positionOK(){
    return true;
}

bool positionIsUnexpected(){
    return true;
}

void alertTMS(){}

</declaration>
		<location id="id9" x="204" y="306">
			<name x="221" y="298">GoToSafeState</name>
		</location>
		<location id="id10" x="204" y="-93">
			<name x="221" y="-102">MuteTimerExpired</name>
		</location>
		<location id="id11" x="-654" y="-93">
			<name x="-731" y="-93">Waiting</name>
		</location>
		<location id="id12" x="-578" y="-246">
			<name x="-620" y="-272">SendTSAOccupied</name>
			<committed/>
		</location>
		<location id="id13" x="-654" y="77">
			<name x="-705" y="43">FrontEndUpdated</name>
		</location>
		<location id="id14" x="-238" y="306">
			<name x="-221" y="306">RearEndUpdated</name>
		</location>
		<location id="id15" x="-221" y="-93">
			<name x="-297" y="-127">SendingTSAUnknown</name>
			<committed/>
		</location>
		<location id="id16" x="-306" y="-246">
			<name x="-289" y="-263">CheckLengthExtent</name>
		</location>
		<location id="id17" x="-170" y="-8">
			<committed/>
		</location>
		<location id="id18" x="204" y="94">
			<committed/>
		</location>
		<location id="id19" x="-731" y="-178">
			<name x="-724" y="-204">SendTSAUnkown</name>
			<committed/>
		</location>
		<location id="id20" x="-654" y="-8">
			<committed/>
		</location>
		<location id="id21" x="-357" y="-42">
			<committed/>
		</location>
		<location id="id22" x="0" y="136">
			<committed/>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id22"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="34" y="195">TPR_NotOK!</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id22"/>
			<label kind="guard" x="-152" y="30">tpr[i].id != i ||
tpr[i].length != length</label>
			<label kind="synchronisation" x="-110" y="76">tsarelease_ch[i]!</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-501" y="-68">TPR_OK!</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id21"/>
			<label kind="guard" x="-323" y="-68">tpr[i].id == i &amp;&amp;
tpr[i].length == length</label>
			<label kind="synchronisation" x="-314" y="-25">tsaoccupy_ch[i]!</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-654" y="8">tsaoccupy_ch[i]!</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-654" y="-67">tpr_ch[i]?</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-790" y="-127">tsaunknown_ch[i]!</label>
			<nail x="-722" y="-127"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-731" y="-161">integrity_timeout_ch[i]?</label>
			<nail x="-671" y="-161"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="204" y="179">tsarelease_ch[i]!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="213" y="0">timeout_ch[i]?</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="0" y="-68">tpr_ch[i]?</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id11"/>
			<label kind="guard" x="-450" y="-212">extensionOK()</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id11"/>
			<label kind="guard" x="-331" y="-204">extendsIntoPreviouslyClearArea()</label>
			<label kind="assignment" x="-331" y="-187">alertTMS()</label>
			<nail x="-348" y="-161"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-493" y="-272">tsaoccupy_ch[i]!</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-119" y="-119">tsaunknown_ch[i]!</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-476" y="-119">timeout_ch[i]?</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-637" y="196">(tpr[i].M_MODE==0||tpr[i].M_MODE==1) &amp;&amp;
tpr[i].integrityConfSource == 3</label>
			<label kind="synchronisation" x="-510" y="238">tsarelease_ch[i]!</label>
			<label kind="assignment" x="-467" y="255">integrityTimer = 0</label>
			<nail x="-459" y="238"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-799" y="272">(tpr[i].M_MODE==0||tpr[i].M_MODE==1) &amp;&amp;
tpr[i].integrityConfSource == 1 &amp;&amp;
integrityAcceptedByDriver()</label>
			<label kind="synchronisation" x="-510" y="289">tsarelease_ch[i]!</label>
			<label kind="assignment" x="-518" y="306">integrityTimer = 0</label>
			<nail x="-654" y="306"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-595" y="34">tpr[i].integrityConfSource == 0 ||
(tpr[i].integrityConfSource == 1 &amp;&amp; !integrityAcceptedByDriver())</label>
			<label kind="synchronisation" x="-459" y="77">tsaunknown_ch[i]!</label>
			<nail x="-238" y="77"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="guard" x="-544" y="111">tpr[i].integrityConfSource == 2</label>
			<label kind="synchronisation" x="-501" y="128">tsarelease_ch[i]!</label>
			<label kind="assignment" x="-484" y="144">integrityTimer = 0</label>
			<nail x="-391" y="162"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id9"/>
			<label kind="guard" x="-102" y="281">positionIsUnexpected()</label>
			<label kind="assignment" x="-68" y="306">alertTMS()</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="guard" x="-365" y="9">positionOK()</label>
			<nail x="-178" y="68"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-620" y="-204">tpr[i].length &gt; length</label>
			<label kind="synchronisation" x="-620" y="-187">tpr_ch[i]?</label>
		</transition>
	</template>
	<template>
		<name>TrackStatusManager</name>
		<parameter>const int i, int length</parameter>
		<declaration>// This should be part of a struct, which should be inside the array of TSAs
int extent = 15; 

const int Configurable_Minimum_Length = 10;

bool sweepable = true;

bool trainCompletelyLocatedInASA(){
    return true;
}

bool rcvReleaseTSAFromTMS(){
    return true;
}

bool frontEndNotProtectedAtSoM(){
    return true;
}

bool conflictWithOtherTrainMovements(){
    return true;
}

void sendTSAReleaseToRouteManager(){}

void updateExtent(){}
</declaration>
		<location id="id23" x="-425" y="-289">
			<name x="-399" y="-306">Unknown</name>
		</location>
		<location id="id24" x="17" y="-289">
			<name x="34" y="-297">Occupied</name>
		</location>
		<location id="id25" x="-586" y="-42">
			<name x="-569" y="-51">GoToSafeState</name>
		</location>
		<location id="id26" x="17" y="-17">
			<name x="34" y="-25">Removed</name>
		</location>
		<location id="id27" x="110" y="-246">
			<committed/>
		</location>
		<init ref="id24"/>
		<transition>
			<source ref="id27"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="42" y="-238">tsarelease_RM_ch[i]!</label>
			<nail x="51" y="-238"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id27"/>
			<label kind="synchronisation" x="85" y="-280">tsarelease_ch[i]?</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id25"/>
			<label kind="guard" x="-731" y="-102">conflictWithOtherTrainMovements()</label>
			<nail x="-518" y="-144"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id25"/>
			<label kind="guard" x="-595" y="-144">tpr[i].length &gt;= length - TSA_LENGTH_TOLERANCE &amp;&amp;
tpr[i].length &lt;= length + TSA_LENGTH_TOLERANCE</label>
			<label kind="synchronisation" x="-476" y="-161">tsaoccupy_ch[i]?</label>
			<nail x="-434" y="-111"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id26"/>
			<label kind="guard" x="-671" y="25">rcvReleaseTSAFromTMS() &amp;&amp; extent == 0</label>
			<label kind="synchronisation" x="-323" y="25">tsarelease_RM_ch[i]!</label>
			<nail x="-748" y="-289"/>
			<nail x="-748" y="51"/>
			<nail x="17" y="51"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id26"/>
			<label kind="guard" x="-323" y="-102">sweepable == true &amp;&amp;
extent&lt;Configurable_Minimum_Length &amp;&amp;
frontEndNotProtectedAtSoM()</label>
			<nail x="-187" y="-17"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id23"/>
			<label kind="guard" x="-697" y="-255">tpr[i].length &lt; length - TSA_LENGTH_TOLERANCE ||
tpr[i].length &gt; length + TSA_LENGTH_TOLERANCE</label>
			<label kind="synchronisation" x="-586" y="-280">tsaoccupy_ch[i]?</label>
			<label kind="assignment" x="-595" y="-221">updateExtent()</label>
			<nail x="-459" y="-238"/>
			<nail x="-510" y="-238"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id23"/>
			<label kind="guard" x="-612" y="-374">rcvReleaseTSAFromTMS() &amp;&amp; extent &gt; 0</label>
			<label kind="synchronisation" x="-527" y="-357">tsarelease_RM_ch[i]!</label>
			<nail x="-459" y="-340"/>
			<nail x="-510" y="-340"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id26"/>
			<label kind="guard" x="25" y="-136">trainCompletelyLocatedInASA()</label>
			<label kind="synchronisation" x="25" y="-161">tsaunknown_ch[i]?</label>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="102" y="-365">tsaoccupy_ch[i]?</label>
			<nail x="42" y="-340"/>
			<nail x="102" y="-340"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="guard" x="-297" y="-289">!trainCompletelyLocatedInASA()</label>
			<label kind="synchronisation" x="-255" y="-306">tsaunknown_ch[i]?</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="guard" x="-297" y="-178">tpr[i].integrityConfSource == 1 &amp;&amp;
integrityAcceptedByDriver()</label>
			<label kind="synchronisation" x="-255" y="-195">tsaoccupy_ch[i]?</label>
			<nail x="-204" y="-195"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="guard" x="-314" y="-416">tpr[i].integrityConfSource == 3</label>
			<label kind="synchronisation" x="-255" y="-399">tsaoccupy_ch[i]?</label>
			<nail x="-204" y="-382"/>
		</transition>
	</template>
	<template>
		<name>RouteManagement</name>
		<parameter>const int i</parameter>
		<location id="id28" x="0" y="0">
		</location>
		<init ref="id28"/>
		<transition>
			<source ref="id28"/>
			<target ref="id28"/>
			<label kind="synchronisation" x="8" y="34">tsarelease_RM_ch[i]?</label>
			<nail x="0" y="68"/>
			<nail x="-68" y="68"/>
		</transition>
	</template>
	<template>
		<name>TrainIntegrity</name>
		<parameter>const int i</parameter>
		<location id="id29" x="-51" y="-93">
			<name x="-61" y="-127">WaitIntegrityTimer</name>
			<label kind="invariant" x="-51" y="-85">integrityTimer &lt;= INTEGRITY_WAIT_TIMEOUT</label>
		</location>
		<location id="id30" x="-128" y="-186">
			<name x="-195" y="-221">IntegrityTimerExpired</name>
		</location>
		<init ref="id29"/>
		<transition>
			<source ref="id30"/>
			<target ref="id29"/>
			<nail x="-145" y="-110"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="guard" x="-43" y="-186">integrityTimer == INTEGRITY_WAIT_TIMEOUT</label>
			<label kind="synchronisation" x="-43" y="-169">integrity_timeout_ch[i]!</label>
			<nail x="-34" y="-169"/>
		</transition>
	</template>
	<system>T0 = Train(0, 10);
T1 = Train(1, 11);

CM0 = CommunicationManager(0);
CM1 = CommunicationManager(1);

TM0 = TrainsManagement(0, 10);
TM1 = TrainsManagement(1, 11);

TSM0 = TrackStatusManager(0, 10);
TSM1 = TrackStatusManager(1, 11);

RM0 = RouteManagement(0);
RM1 = RouteManagement(1);

TI0 = TrainIntegrity(0);
TI1 = TrainIntegrity(1);

system T0, CM0, T1, CM1, TM0, TM1, TSM0, TSM1, RM0, RM1, TI0, TI1;
    </system>
	<queries>
		<query>
			<formula>A&lt;&gt; C0.WaitForReconnection</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
